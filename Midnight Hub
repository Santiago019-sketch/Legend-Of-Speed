-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local UserInputService = game:GetService("UserInputService")

-- Variables
local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

-- UI Library
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

-- Window Creation
local Window = OrionLib:MakeWindow({
    Name = "Midnight Hub | Legend of Speed",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "MidnightConfig",
    IntroEnabled = true,
    IntroText = "Midnight Hub"
})

-- Tabs
local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local AutofarmTab = Window:MakeTab({
    Name = "Autofarm",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local CrystalTab = Window:MakeTab({
    Name = "Crystals",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local SettingsTab = Window:MakeTab({
    Name = "Settings",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Enhanced Functions
local function CollectOrbs(orbType, area)
    if ReplicatedStorage and ReplicatedStorage:FindFirstChild("rEvents") and ReplicatedStorage.rEvents:FindFirstChild("orbEvent") then
        local args = {
            [1] = "collectOrb",
            [2] = orbType,
            [3] = area
        }
        ReplicatedStorage.rEvents.orbEvent:FireServer(unpack(args))
    end
end

local function AutoCollectAllOrbs()
    local orbTypes = {"Yellow Orb", "Orange Orb", "Red Orb", "Blue Orb", "Gem"}
    local areas = {"City", "Snow City", "Magma City", "Desert"}
    
    for _, area in ipairs(areas) do
        for _, orbType in ipairs(orbTypes) do
            task.spawn(function()
                CollectOrbs(orbType, area)
            end)
        end
    end
end

-- Crystal Opening Function
local function OpenCrystal(crystalType)
    local args = {
        [1] = "openCrystal",
        [2] = crystalType
    }
    ReplicatedStorage.rEvents.openCrystalRemote:InvokeServer(unpack(args))
end

-- Main Tab
local MainSection = MainTab:AddSection({
    Name = "Main Features"
})

MainSection:AddToggle({
    Name = "Auto Collect All",
    Default = false,
    Callback = function(Value)
        getgenv().AutoCollectAll = Value
        while getgenv().AutoCollectAll and task.wait() do
            pcall(AutoCollectAllOrbs)
        end
    end
})

MainSection:AddToggle({
    Name = "Auto Rebirth",
    Default = false,
    Callback = function(Value)
        getgenv().AutoRebirth = Value
        while getgenv().AutoRebirth and task.wait(0.5) do
            pcall(function()
                ReplicatedStorage.rEvents.rebirthEvent:FireServer("rebirthRequest")
            end)
        end
    end
})

-- Autofarm Tab
local AutofarmSection = AutofarmTab:AddSection({
    Name = "Farming Features"
})

AutofarmSection:AddToggle({
    Name = "Safe Hoops Farm",
    Default = false,
    Callback = function(Value)
        getgenv().SafeHoops = Value
        
        if Value then
            HumanoidRootPart.CFrame = CFrame.new(0, 10000, 0)
        end
        
        while getgenv().SafeHoops and task.wait(0.3) do
            pcall(function()
                for _, hoop in pairs(workspace.Hoops:GetChildren()) do
                    if hoop:IsA("BasePart") and getgenv().SafeHoops then
                        hoop.CFrame = HumanoidRootPart.CFrame
                        task.wait(0.3)
                    end
                end
            end)
        end
    end
})

AutofarmSection:AddToggle({
    Name = "Fast Hoops Farm",
    Default = false,
    Callback = function(Value)
        getgenv().FastHoops = Value
        while getgenv().FastHoops and task.wait(0.1) do
            pcall(function()
                for _, hoop in pairs(workspace.Hoops:GetChildren()) do
                    if hoop:IsA("BasePart") then
                        hoop.CFrame = HumanoidRootPart.CFrame
                    end
                end
            end)
        end
    end
})

-- Crystal Tab
local CrystalSection = CrystalTab:AddSection({
    Name = "Crystal Opening"
})

local crystalTypes = {
    "Red Crystal",
    "Blue Crystal",
    "Purple Crystal",
    "Lightning Crystal",
    "Dark Crystal",
    "Inferno Crystal",
    "Rainbow Crystal",
    "Space Crystal"
}

CrystalSection:AddDropdown({
    Name = "Select Crystal",
    Default = "Blue Crystal",
    Options = crystalTypes,
    Callback = function(Value)
        getgenv().SelectedCrystal = Value
    end
})

CrystalSection:AddToggle({
    Name = "Auto Open Selected Crystal",
    Default = false,
    Callback = function(Value)
        getgenv().AutoOpenCrystal = Value
        while getgenv().AutoOpenCrystal and task.wait(1) do
            if getgenv().SelectedCrystal then
                pcall(function()
                    OpenCrystal(getgenv().SelectedCrystal)
                end)
            end
        end
    end
})

CrystalSection:AddButton({
    Name = "Open All Crystal Types Once",
    Callback = function()
        for _, crystalType in ipairs(crystalTypes) do
            pcall(function()
                OpenCrystal(crystalType)
                task.wait(0.5)
            end)
        end
    end
})

-- Settings Tab
local SettingsSection = SettingsTab:AddSection({
    Name = "Settings"
})

SettingsSection:AddButton({
    Name = "Destroy GUI",
    Callback = function()
        OrionLib:Destroy()
    end
})

SettingsSection:AddButton({
    Name = "Rejoin Game",
    Callback = function()
        TeleportService:Teleport(game.PlaceId, Player)
    end
})

-- Initialize
OrionLib:Init()

-- Toggle Key
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.RightControl then
        OrionLib:ToggleUI()
    end
end)

-- Anti AFK
local VirtualUser = game:GetService("VirtualUser")
Player.Idled:Connect(function()
    VirtualUser:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
    task.wait(1)
    VirtualUser:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
end)
