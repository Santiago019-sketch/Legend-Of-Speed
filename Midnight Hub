-- Configuration
local Config = {
    WindowName = "Midnight Hub | Speed of Legends",
    IntroText = "Midnight Hub",
    DiscordLink = "https://discord.gg/midnight-hub",
    ToggleKey = Enum.KeyCode.RightControl
}

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local UserInputService = game:GetService("UserInputService")

-- Load UI Library
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

-- Utility Functions
local Utils = {}

function Utils.SafeCallback(callback)
    return function(...)
        local success, result = pcall(callback, ...)
        if not success then
            warn("Callback error:", result)
        end
        return success, result
    end
end

function Utils.CreateNotification(title, content, duration)
    OrionLib:MakeNotification({
        Name = title,
        Content = content,
        Image = "rbxassetid://4483345998",
        Time = duration or 5
    })
end

-- Main Window
local Window = OrionLib:MakeWindow({
    Name = Config.WindowName,
    HidePremium = false,
    SaveConfig = true,
    IntroEnabled = true,
    IntroText = Config.IntroText,
    ConfigFolder = "MidnightHub"
})

-- Farming Controller
local FarmingController = {}

function FarmingController.CollectOrb(orbType, location)
    if ReplicatedStorage and ReplicatedStorage:FindFirstChild("rEvents") then
        local args = {
            "collectOrb",
            orbType,
            location
        }
        ReplicatedStorage.rEvents.orbEvent:FireServer(unpack(args))
    end
end

function FarmingController.AutoCollectOrbs(enabled)
    while enabled and task.wait(0.1) do
        local success = pcall(function()
            local orbTypes = {"Yellow Orb", "Orange Orb", "Red Orb", "Blue Orb"}
            local locations = {"City", "Desert", "Magma City"}
            
            for _, location in ipairs(locations) do
                for _, orbType in ipairs(orbTypes) do
                    FarmingController.CollectOrb(orbType, location)
                end
            end
        end)
        if not success then break end
    end
end

-- Pet Controller
local PetController = {}

function PetController.BuyEgg(eggType)
    if ReplicatedStorage and ReplicatedStorage:FindFirstChild("rEvents") then
        local args = {
            "purchaseEgg",
            eggType
        }
        ReplicatedStorage.rEvents.eggEvent:FireServer(unpack(args))
    end
end

function PetController.AutoBuyEggs(eggType, enabled)
    while enabled and task.wait(1) do
        pcall(function()
            PetController.BuyEgg(eggType)
        end)
    end
end

-- Create Tabs
local Tabs = {
    Main = Window:MakeTab({
        Name = "Main",
        Icon = "rbxassetid://4483345998",
        PremiumOnly = false
    }),
    Pets = Window:MakeTab({
        Name = "Pets",
        Icon = "rbxassetid://4483345998",
        PremiumOnly = false
    }),
    Misc = Window:MakeTab({
        Name = "Misc",
        Icon = "rbxassetid://4483345998",
        PremiumOnly = false
    })
}

-- Main Tab Setup
local MainSection = Tabs.Main:AddSection({
    Name = "Farming"
})

MainSection:AddToggle({
    Name = "Auto Collect All Orbs",
    Default = false,
    Callback = function(Value)
        getgenv().AutoCollectOrbs = Value
        if Value then
            coroutine.wrap(FarmingController.AutoCollectOrbs)(Value)
        end
    end
})

-- Hoops Section
local HoopsSection = Tabs.Main:AddSection({
    Name = "Hoops Farm"
})

HoopsSection:AddToggle({
    Name = "Safe Hoops Farm",
    Default = false,
    Callback = function(Value)
        getgenv().SafeHoopsFarm = Value
        while Value and task.wait(0.3) do
            pcall(function()
                for _, hoop in pairs(workspace.Hoops:GetChildren()) do
                    if hoop:IsA("BasePart") then
                        hoop.CFrame = Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                    end
                end
            end)
        end
    end
})

-- Auto Rebirth Section
local RebirthSection = Tabs.Main:AddSection({
    Name = "Rebirth"
})

RebirthSection:AddToggle({
    Name = "Auto Rebirth",
    Default = false,
    Callback = function(Value)
        getgenv().AutoRebirth = Value
        while Value and task.wait(0.5) do
            pcall(function()
                ReplicatedStorage.rEvents.rebirthEvent:FireServer("rebirthRequest")
            end)
        end
    end
})

-- Pets Tab Setup
local PetsSection = Tabs.Pets:AddSection({
    Name = "Auto Buy Eggs"
})

local eggTypes = {
    "Basic Egg",
    "Rare Egg",
    "Ultra Egg",
    "Desert Egg",
    "Lava Egg"
}

PetsSection:AddDropdown({
    Name = "Select Egg Type",
    Default = "Basic Egg",
    Options = eggTypes,
    Callback = function(Value)
        getgenv().SelectedEggType = Value
    end
})

PetsSection:AddToggle({
    Name = "Auto Buy Selected Egg",
    Default = false,
    Callback = function(Value)
        getgenv().AutoBuyEggs = Value
        if Value and getgenv().SelectedEggType then
            coroutine.wrap(PetController.AutoBuyEggs)(getgenv().SelectedEggType, Value)
        end
    end
})

-- Misc Tab Setup
local MiscSection = Tabs.Misc:AddSection({
    Name = "Options"
})

MiscSection:AddButton({
    Name = "Destroy GUI",
    Callback = function()
        OrionLib:Destroy()
    end    
})

MiscSection:AddButton({
    Name = "Rejoin Game",
    Callback = function()
        TeleportService:Teleport(game.PlaceId, Players.LocalPlayer)
    end    
})

-- Initialize
OrionLib:Init()

-- Set default toggle key to Right Control
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.KeyCode == Config.ToggleKey then
        OrionLib:ToggleUI()
    end
end)
